<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="SEQ_B5" Id="{bc6141b6-7d49-46c9-852b-c224404900f1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM SEQ_B5
VAR_INPUT
	B5_sequence	: UINT;
	process_A	: UINT; // IF RACK PICK (KR5)
	process_J	: UINT; // PLACE TO JIG A (KR5)
	process_B	: UINT; // JIG A WELDING(KR3)
	process_C	: UINT; // JIG A TO JIG B {KR5}
	process_D	: UINT; // JIG B WELDING (KR3) 
	process_E	: UINT; // JIG B TO TWINTORCH (KR5) 
	process_F	: UINT; // TWINTORCH TO JIG C (KR5)
	process_G	: UINT; // BRACKET TO JIG C (KR2) 
	process_H	: UINT; // JIG C WELDING (KR4)
	process_I	: UINT; // JIG C TO PICK (KR2)
	process_K	: UINT; // PLACE TO CR (KR2)
	
END_VAR
VAR
	Bit1			: INT;
	Bit2			: INT;
	Jig_ErrorTime 	: TIME := T#5S;
	TT_ErrorTime 	: TIME := T#120S;
	JigTimerA 		: TON;
	JigTimerB 		: TON;
	JigTimerC 		: TON;
	TTTimer			: TON;
	Msg_PlaceCR		: STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT IF_RACK_CHECK.checkIn_B5 
OR NOT INFEED_RACK.IFRack_Ready THEN
	RETURN;
END_IF

CASE B5_sequence OF
	// INITIATE --------------------------------------------------------------------------------------------------------------		
	0:
		process_A := 0;
		process_B := 0;
		process_C := 0;
		process_D := 0;
		process_E := 0;
		process_F := 0;
		process_G := 0;
		process_H := 0;
		process_I := 0;
		process_J := 0;
		process_K := 0;
		
		JigTimerA (IN:= FALSE);
		JigTimerB (IN:= FALSE);
		JigTimerC (IN:= FALSE);
		TTTimer	  (IN:= FALSE);
		
		AUTO_MODE.JIGA_ErrorState 	:= FALSE;
		AUTO_MODE.JIGB_ErrorState 	:= FALSE;
		AUTO_MODE.JIGC_ErrorState 	:= FALSE;
		AUTO_MODE.TT_ErrorState 	:= FALSE;
		
		AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_INIT);
		LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
		 			spLogAction	 := MSG.ACTION_INIT, 
		 			spLogStatus	 := MSG.STATUS_DONE,
	 	 		 	plogFlag	 := TRUE);
					
		B5_sequence := 1;
	
	// IF RACK PICK (KR5) --------------------------------------------------------------------------------------------------------------		
	1:
		IF process_A = 0 THEN
			Bit1 := 4; 
			Bit2 := 2; //205
			IF 	KR3.Idle AND 
				KR5.Idle AND 
				GVL.JIGA_Standby AND
				NOT AUTO_MODE.JIGA_LOAD AND
				NOT AUTO_MODE.IF_PICK THEN
						KR5.bOutBit[ Bit1,Bit2 ] := TRUE;
						AUTO_MODE.IF_PICK := TRUE;
						process_A := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_IF_B5);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_IF_B5, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_A = 1 THEN
			KR5.bOutBit[ Bit1,Bit2 ] := TRUE; 
			IF KR5.bInBit[ Bit1,Bit2 ] THEN
				KR5.bOutBit[ Bit1,Bit2 ] := FALSE; 
				process_A := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_IF_B5);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_IF_B5, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF	
		ELSIF process_A = 2 THEN
			KR5.bOutBit[ Bit1,Bit2 ] := FALSE; 
			IF NOT KR5.bInBit[ Bit1,Bit2 ] THEN
				process_A:= 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_IF_B5);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_IF_B5, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF	
		ELSIF process_A = 3 THEN
			IF KR5.Idle THEN
				process_A := 4;
				B5_sequence := 2;
				AUTO_MODE.next_step := FALSE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_IF_B5);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_IF_B5, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		END_IF	
		
	// PLACE TO JIG A (KR5) --------------------------------------------------------------------------------------------------------------		
	2:
		IF process_J = 0 THEN
			Bit1 := 3; 
			Bit2 := 0; //200
			IF 	KR3.Idle AND 
				KR5.Idle AND
				GVL.JIGA_Standby AND 
				AUTO_MODE.IF_PICK AND 
				NOT AUTO_MODE.JIGA_LOAD THEN 
						KR5.bOutBit[ Bit1,Bit2 ] := TRUE;
						AUTO_MODE.JIGA_LOAD := TRUE;
						process_J := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_PLACE);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGA_PLACE, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_J = 1 THEN
			KR5.bOutBit[ Bit1,Bit2 ] := TRUE;
			IF NOT KR5.bInBit[ Bit1,Bit2 ] THEN
				KR5.bOutBit[ Bit1,Bit2 ] := FALSE;
				process_J := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_PLACE);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_PLACE, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF	
		ELSIF process_J = 2 THEN
			KR5.bOutBit[ Bit1,Bit2 ] := FALSE;
			IF KR5.bInBit[ Bit1,Bit2 ] THEN
				process_J:= 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_PLACE);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_PLACE, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF	
		ELSIF process_J = 3 THEN
			IF 	KR5.Idle AND  
				AUTO_MODE.JIGA_LOAD AND
				NOT GVL.JIGA_Standby THEN
						AUTO_MODE.IF_PICK := FALSE;
						process_J := 4;
						B5_sequence := 3;
						AUTO_MODE.next_step := FALSE;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_PLACE);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGA_PLACE, 
									spLogStatus	 := MSG.STATUS_COMP,
									plogFlag	 := TRUE);
			END_IF
		END_IF	
	
	// JIG A CLAMP -----------------------------------------------------------------------------------------------------------------------
	3:
		IF NOT AUTO_MODE.Halt_Production THEN
			GVL.JIGA_Clamp := TRUE;
			GVL.JIGA_Release := FALSE;
			JigTimerA(IN := TRUE, PT := JIG_ErrorTime);
		END_IF
		//insert Jig safety check here 
		
		IF JigTimerA.Q THEN
			AUTO_MODE.JIGA_ErrorState := TRUE;
			IF GVL.ClearError THEN
				JigTimerA(IN:= FALSE);
				GVL.ClearError := FALSE;
			ELSE
				AUTO_MODE.Halt_Production := TRUE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_CLAMP);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ERROR);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_CLAMP, 
							spLogStatus	 := MSG.STATUS_ERROR,
							plogFlag	 := TRUE);
			END_IF
		ELSIF GVL.JIGA_Ready THEN
			JigTimerA(IN := FALSE);
			AUTO_MODE.JIGA_ErrorState := FALSE;
			AUTO_MODE.next_step := FALSE;
			AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_CLAMP);
			AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
			LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
						spLogAction	 := MSG.ACTION_JIGA_CLAMP, 
						spLogStatus	 := MSG.STATUS_COMP,
						plogFlag	 := TRUE);
			IF GVL.KR2_bypass THEN
				process_B	:= 3;	
				B5_sequence := 4;
			ELSE	
				process_B	:= 0;	
				B5_sequence := 4;
			END_IF
		END_IF
		
	// JIG A WELDING(KR3) ------------------------------------------------------------------------------------------------------------------
	4:
		IF process_B = 0 THEN
			Bit1 := 3; 
			Bit2 := 0; //300
			IF 	KR3.Idle AND 
//				KR5.Idle AND
				GVL.JIGA_Ready AND  
				NOT AUTO_MODE.JIGA_WELDING AND 
				NOT AUTO_MODE.JIGB_WELDING THEN
						KR3.bOutBit[ Bit1,Bit2 ] := TRUE;
						AUTO_MODE.JIGA_WELDING := TRUE;
						process_B := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_WELDING);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGA_WELDING, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
									RETURN;
			END_IF
		ELSIF process_B = 1 THEN 
			KR3.bOutBit[ Bit1,Bit2 ] := TRUE;
			IF NOT KR3.bInBit[ Bit1,Bit2 ] THEN
				KR3.bOutBit[ Bit1,Bit2 ] := FALSE;	
				process_B := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_WELDING, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_B = 2 THEN 
			KR3.bOutBit[ Bit1,Bit2 ] := FALSE;
			IF KR3.bInBit[ Bit1,Bit2 ] THEN
				process_B := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_WELDING, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_B = 3 THEN
			IF KR3.Idle THEN
				AUTO_MODE.JIGA_WELDING := FALSE;
				GVL.JIGA_Clamp := FALSE;
				GVL.JIGA_Release := TRUE;
				JigTimerA(IN := FALSE);
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_RELEASE);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_RELEASE, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				process_B := 4;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_WELDING, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		ELSIF process_B = 4 THEN
			IF NOT AUTO_MODE.Halt_Production THEN
				GVL.JIGA_Clamp 		:= FALSE;
				GVL.JIGA_Release 	:= TRUE;
				JigTimerA(IN := TRUE, PT := JIG_ErrorTime);
			END_IF
			//insert Jig safety check here ------------------------------
			IF JigTimerA.Q THEN
				AUTO_MODE.JIGA_ErrorState := TRUE;
				IF GVL.ClearError THEN
					JigTimerA(IN:= FALSE);
					GVL.ClearError := FALSE;
				ELSE
					AUTO_MODE.Halt_Production := TRUE;
					AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_RELEASE);
					AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ERROR);
					LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
								spLogAction	 := MSG.ACTION_JIGA_RELEASE, 
								spLogStatus	 := MSG.STATUS_ERROR,
								plogFlag	 := TRUE);
				END_IF
			ELSIF GVL.JIGA_Complete THEN
				JigTimerA(IN:= FALSE);
				AUTO_MODE.JIGA_ErrorState := FALSE;
				process_B := 5;
				B5_sequence := 5;
				AUTO_MODE.next_step := FALSE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_COMPLETE);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_COMPLETE, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		END_IF
		
	// JIG A TO JIG B {KR5} -----------------------------------------------------------------------------------------------------------------
	5: 
		IF process_C = 0 THEN
			Bit1 := 3;
			Bit2 := 1; //201
			IF 	KR3.Idle AND 
				KR5.Idle AND 
				GVL.JIGB_Standby AND 
				NOT GVL.JIGA_Ready AND 
				NOT AUTO_MODE.JIGB_LOAD AND 
				NOT AUTO_MODE.JIGA_WELDING AND 
				NOT AUTO_MODE.JIGB_WELDING AND 
				NOT AUTO_MODE.JIGC_WELDING THEN
						AUTO_MODE.JIGB_LOAD := TRUE;
						KR5.bOutBit[ Bit1, Bit2 ] := TRUE;
						process_C := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_TO_JIGB);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGA_TO_JIGB, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_C = 1 THEN 
			KR5.bOutBit [ Bit1, Bit2 ] := TRUE;
			IF KR5.bInBit[ Bit1, Bit2 ] THEN
				KR5.bOutBit[ Bit1, Bit2 ] := FALSE;
				process_C := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_TO_JIGB);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_TO_JIGB, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_C = 2 THEN 
			KR5.bOutBit[ Bit1, Bit2 ] := FALSE;
			IF NOT KR5.bInBit[ Bit1, Bit2 ] THEN
				process_C := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_TO_JIGB);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGA_TO_JIGB, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_C = 3 THEN
			IF 	KR5.Idle AND 
				NOT GVL.JIGB_Standby THEN
						AUTO_MODE.JIGA_LOAD := FALSE;
						process_C := 4;
						B5_sequence := 6;
						AUTO_MODE.next_step := FALSE;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGA_TO_JIGB);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGA_TO_JIGB, 
									spLogStatus	 := MSG.STATUS_COMP,
									plogFlag	 := TRUE);
			END_IF
		END_IF
		
	//	JIG B CLAMP	-----------------------------------------------------------------------------------------------------------------------
	6:
		IF NOT AUTO_MODE.Halt_Production THEN
			GVL.JIGB_Clamp := TRUE;
			GVL.JIGB_Release := FALSE;
			JigTimerB(IN := TRUE, PT := JIG_ErrorTime);
		END_IF
		//insert Jig safety check here ------------------------------
		IF JigTimerB.Q THEN
			AUTO_MODE.JIGB_ErrorState := TRUE;
			IF GVL.ClearError THEN
				JigTimerB(IN:= FALSE);
				GVL.ClearError := FALSE;
			ELSE
				AUTO_MODE.Halt_Production := TRUE;
			AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_CLAMP);
			AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ERROR);
			LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
						spLogAction	 := MSG.ACTION_JIGB_CLAMP, 
						spLogStatus	 := MSG.STATUS_DONE,
						plogFlag	 := TRUE);
			END_IF
		ELSIF GVL.JIGB_Ready THEN
			JigTimerB(IN:= FALSE);
			AUTO_MODE.JIGB_ErrorState := FALSE;
			AUTO_MODE.next_step := FALSE;
			AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_CLAMP);
			AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
			LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
						spLogAction	 := MSG.ACTION_JIGB_CLAMP, 
						spLogStatus	 := MSG.STATUS_DONE,
						plogFlag	 := TRUE);
			IF GVL.KR2_bypass THEN
				process_D	:= 3;	
				B5_sequence := 7;
			ELSE	
				process_D	:= 0;	
				B5_sequence := 7;
			END_IF
		END_IF
		
	// JIG B WELDING (KR3) -------------------------------------------------------------------------------------------------------------	
	7:
		IF process_D = 0 THEN
			Bit1 := 3;
			Bit2 := 1; //301
			IF 	KR3.Idle AND 
				GVL.JIGB_Ready AND
				NOT AUTO_MODE.JIGA_WELDING AND 
				NOT AUTO_MODE.JIGB_WELDING THEN
						KR3.bOutBit[ Bit1, Bit2 ] := TRUE;
						AUTO_MODE.JIGB_WELDING := TRUE;
						process_D := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_WELDING);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGB_WELDING, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_D = 1 THEN
			KR3.bOutBit[ Bit1, Bit2 ] := TRUE;
			IF KR3.bInBit[ Bit1, Bit2 ] THEN
				KR3.bOutBit[ Bit1, Bit2 ] := FALSE;
				process_D := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGB_WELDING, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_D = 2 THEN
			KR3.bOutBit[ Bit1, Bit2 ] := FALSE;
			IF NOT KR3.bInBit[ Bit1, Bit2 ] THEN
				process_D := 3;
				AUTO_MODE.Run_Next_Rack := TRUE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGB_WELDING, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_D = 3 THEN
			IF KR3.Idle THEN
				AUTO_MODE.JIGB_WELDING := FALSE;
				GVL.JIGB_Clamp := FALSE;
				GVL.JIGB_Release := TRUE;
				JigTimerB(IN:= FALSE);
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_RELEASE);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGB_RELEASE, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				process_D := 4;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGB_WELDING, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
			ELSIF process_D = 4 THEN
			IF NOT AUTO_MODE.Halt_Production THEN
				GVL.JIGB_Clamp 		:= FALSE;
				GVL.JIGB_Release 	:= TRUE;
				JigTimerB(IN := TRUE, PT := JIG_ErrorTime);
			END_IF
			//insert Jig safety check here ------------------------------
			IF JigTimerB.Q THEN
				AUTO_MODE.JIGB_ErrorState := TRUE;
				IF GVL.ClearError THEN
					JigTimerB(IN:= FALSE);
					GVL.ClearError := FALSE;
				ELSE
					AUTO_MODE.Halt_Production := TRUE;
					AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_RELEASE);
					AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ERROR);
					LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
								spLogAction	 := MSG.ACTION_JIGB_RELEASE, 
								spLogStatus	 := MSG.STATUS_ERROR,
								plogFlag	 := TRUE);
				END_IF
			ELSIF GVL.JIGB_Complete THEN
				JigTimerB(IN:= FALSE);
				AUTO_MODE.JIGB_ErrorState := FALSE;
					process_D := 5;
					B5_sequence := 8;
					AUTO_MODE.next_step := FALSE;
					AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_COMPLETE);
					AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
					LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
								spLogAction	 := MSG.ACTION_JIGB_COMPLETE, 
								spLogStatus	 := MSG.STATUS_COMP,
								plogFlag	 := TRUE);
				END_IF
		END_IF
		
	// JIG B TO TWINTORCH (KR5) -------------------------------------------------------------------------------------------------------------
	8: 
		IF process_E = 0 THEN
			Bit1 := 3;
			Bit2 := 2; //302
//			IF 	KR3.Idle AND 
			IF	KR5.Idle AND
				GVL.TTorch_Standy AND 
				NOT AUTO_MODE.IF_PICK AND
				NOT AUTO_MODE.IF_PICK AND
				NOT AUTO_MODE.TT_LOAD AND 
				NOT GVL.JIGB_Ready AND
				NOT AUTO_MODE.JIGA_WELDING AND 
				NOT AUTO_MODE.JIGB_WELDING AND 
				NOT AUTO_MODE.TT_WELDING THEN
						AUTO_MODE.TT_LOAD := TRUE;
						KR5.bOutBit[ Bit1, Bit2 ] := TRUE;
						process_E := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_TO_TT);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGB_TO_TT, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_E = 1 THEN
			KR5.bOutBit[ Bit1, Bit2 ] := TRUE;
			IF KR5.bInBit[ Bit1, Bit2 ] THEN
				KR5.bOutBit[ Bit1, Bit2 ] := FALSE;
				process_E := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_TO_TT);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGB_TO_TT, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_E = 2 THEN
			KR5.bOutBit[ Bit1, Bit2 ] := FALSE;
			IF NOT KR5.bInBit[ Bit1, Bit2 ] THEN
				process_E := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_TO_TT);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGB_TO_TT, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_E = 3 THEN
			IF KR5.Idle THEN
				AUTO_MODE.JIGB_LOAD := FALSE;
				process_E := 4;
				B5_sequence := 9;
				AUTO_MODE.next_step := FALSE;
//				AUTO_MODE.Run_Next_Rack :=TRUE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGB_TO_TT);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGB_TO_TT, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		END_IF	
	
	// TWINTORCH WELDING -------------------------------------------------------------------------------------------------------------	
	9:
		//insert Jig safety check here ------------------------------
		IF NOT GVL.TTorch_Standy THEN
			GVL.TTorch_Run := TRUE;
			AUTO_MODE.TT_WELDING := TRUE;
			B5_sequence := 10;
			TTTimer(IN := TRUE, PT := TT_ErrorTime);
			AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_TT_RUN);
			AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
			LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
						spLogAction	 := MSG.ACTION_TT_RUN, 
						spLogStatus	 := MSG.STATUS_RUN,
						plogFlag	 := TRUE);
			RETURN;
		END_IF
	// TWINTORCH WELD COMPLETE -------------------------------------------------------------------------------------------------------------		
	10:
		
		//insert Jig safety check here ------------------------------
		IF TTTimer.Q THEN
			AUTO_MODE.TT_ErrorState := TRUE;
			IF GVL.ClearError THEN
				TTTimer(IN:= FALSE);
				GVL.ClearError := FALSE;
			ELSE
				AUTO_MODE.Halt_Production := TRUE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_TT_RUN);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ERROR);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_TT_RUN, 
							spLogStatus	 := MSG.STATUS_ERROR,
							plogFlag	 := TRUE);
			END_IF
		ELSIF GVL.TTorch_Complete THEN
			TTTimer(IN:= FALSE);
			AUTO_MODE.TT_ErrorState := FALSE;
			GVL.TTorch_Run := FALSE;
			AUTO_MODE.TT_WELDING := FALSE;
			B5_sequence := 11;
			AUTO_MODE.next_step := FALSE;
			AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_TT_RUN);
			AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
			LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
						spLogAction	 := MSG.ACTION_TT_RUN, 
						spLogStatus	 := MSG.STATUS_DONE,
						plogFlag	 := TRUE);
			RETURN;
		END_IF
		
	// TWINTORCH TO JIG C (KR5)	-------------------------------------------------------------------------------------------------------
	11:
		IF process_F = 0 THEN
			Bit1 := 3;
			Bit2 := 3; //203
			IF 	KR5.Idle AND 
				KR4.Idle AND 
				GVL.JIGC_Standby AND 
				NOT AUTO_MODE.JIGC_LOAD AND
				NOT AUTO_MODE.JIGC_WELDING AND 
				NOT AUTO_MODE.TT_WELDING  THEN
						KR5.bOutBit[ Bit1, Bit2 ] := TRUE;
						process_F := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_TT_TO_JIGC);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_TT_TO_JIGC, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_F = 1 THEN
			KR5.bOutBit[ Bit1, Bit2 ] := TRUE;
			IF KR5.bInBit[ Bit1, Bit2 ] THEN
				KR5.bOutBit[ Bit1, Bit2 ] := FALSE;	
				process_F := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_TT_TO_JIGC);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_TT_TO_JIGC, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_F = 2 THEN
			KR5.bOutBit[ Bit1, Bit2 ] := FALSE;	
			IF NOT KR5.bInBit[ Bit1, Bit2 ] THEN
				process_F := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_TT_TO_JIGC);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_TT_TO_JIGC, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_F = 3 THEN
			IF KR5.Idle AND NOT GVL.JIGC_Standby THEN
				AUTO_MODE.JIGC_LOAD := TRUE;
				AUTO_MODE.TT_LOAD := FALSE;
				process_F := 4;
				B5_sequence := 12;
				AUTO_MODE.next_step := FALSE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_TT_TO_JIGC);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_TT_TO_JIGC, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		END_IF
	
	// BRACKET TO JIG C (KR2) -------------------------------------------------------------------------------------------------------------
	12:
		Bit1 := 3;
		Bit2 := 0; //200
		IF process_G = 0 THEN
			IF 	KR2.Idle AND 
				KR4.Idle AND 
				GVL.VibBowl_Ready AND
				AUTO_MODE.JIGC_LOAD AND 
				NOT GVL.JIGC_Standby AND 
				NOT AUTO_MODE.CR_PICK AND
				NOT AUTO_MODE.JIGC_PICK AND
				NOT AUTO_MODE.JIGC_WELDING THEN
						KR2.bOutBit[ Bit1, Bit2 ] := TRUE;
						AUTO_MODE.VB_PICK := TRUE;
						process_G := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_VB_TO_JIGC);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_VB_TO_JIGC, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_G = 1 THEN
			KR2.bOutBit[ Bit1, Bit2 ] := TRUE;
			IF NOT KR2.bInBit[ Bit1, Bit2 ] THEN
				KR2.bOutBit[ Bit1, Bit2 ] := FALSE;
				process_G := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_VB_TO_JIGC);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_VB_TO_JIGC, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_G = 2 THEN
			KR2.bOutBit[ Bit1, Bit2 ] := FALSE;
			IF KR2.bInBit[ Bit1, Bit2 ] THEN
				process_G := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_VB_TO_JIGC);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_VB_TO_JIGC, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_G = 3 THEN 
			IF 	KR2.Idle AND 
				NOT GVL.JIGC_Standby AND 
				AUTO_MODE.JIGC_LOAD THEN
						AUTO_MODE.VB_PICK := FALSE;
						process_G := 4;
						B5_sequence := 13;
						AUTO_MODE.next_step := FALSE;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_VB_TO_JIGC);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_VB_TO_JIGC, 
									spLogStatus	 := MSG.STATUS_COMP,
									plogFlag	 := TRUE);
			END_IF
		END_IF
		
	// JIG C CLAMP ---------------------------------------------------------------------------------------------------------------
	13:
		IF NOT AUTO_MODE.Halt_Production THEN
			GVL.JIGC_Clamp := TRUE;
			GVL.JIGC_Release := FALSE;
			JigTimerC(IN := TRUE, PT := JIG_ErrorTime);
		END_IF
		//insert Jig safety check here ------------------------------
		IF JigTimerC.Q THEN
			AUTO_MODE.JIGC_ErrorState := TRUE;
			IF GVL.ClearError THEN
				JigTimerC(IN:= FALSE);
				GVL.ClearError := FALSE;
			ELSE
				AUTO_MODE.Halt_Production := TRUE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_CLAMP);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ERROR);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_CLAMP, 
							spLogStatus	 := MSG.STATUS_ERROR,
							plogFlag	 := TRUE);
			END_IF
		ELSIF GVL.JIGC_Ready THEN
			JigTimerC(IN:= FALSE);
			AUTO_MODE.JIGC_ErrorState := FALSE;
			AUTO_MODE.next_step := FALSE;
			AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_CLAMP);
			AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
			LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
						spLogAction	 := MSG.ACTION_JIGC_CLAMP, 
						spLogStatus	 := MSG.STATUS_DONE,
						plogFlag	 := TRUE);
			IF GVL.KR4_bypass THEN
				process_H	:= 3;	
				B5_sequence := 14;
			ELSE	
				process_H	:= 0;	
				B5_sequence := 14;
			END_IF
		END_IF
		
	// JIG C WELDING (KR4) -------------------------------------------------------------------------------------------------------
	14:
		IF process_H = 0 THEN
			Bit1 := 3;
			Bit2 := 0; // 300
			IF 	KR4.Idle AND 
				GVL.JIGC_Ready AND 
				AUTO_MODE.JIGC_LOAD AND
				NOT AUTO_MODE.JIGC_WELDING THEN
						KR4.bOutBit[ Bit1,Bit2 ] := TRUE;
						AUTO_MODE.JIGC_WELDING := TRUE;
						process_H := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_WELDING);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGC_WELDING, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_H = 1 THEN
			KR4.bOutBit[ Bit1,Bit2 ] := TRUE;
			IF NOT KR4.bInBit[ Bit1,Bit2 ] THEN
				KR4.bOutBit[ Bit1,Bit2 ] := FALSE;
				process_H := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_WELDING, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_H = 2 THEN
			KR4.bOutBit[ Bit1,Bit2 ] := FALSE;
			IF KR4.bInBit[ Bit1,Bit2 ] THEN
				process_H := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_WELDING, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_H = 3 THEN
			IF KR4.Idle THEN
				AUTO_MODE.JIGC_WELDING := FALSE;
				GVL.JIGC_Release := TRUE;
				GVL.JIGC_Clamp := FALSE;
				JigTimerC(IN:= FALSE);
				process_H := 4;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_WELDING);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_WELDING, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		ELSIF process_H = 4 THEN
			IF NOT AUTO_MODE.Halt_Production THEN
				GVL.JIGC_Clamp 		:= FALSE;
				GVL.JIGC_Release 	:= TRUE;
				JigTimerC(IN := TRUE, PT := JIG_ErrorTime);
			END_IF
			//insert Jig safety check here ------------------------------
			IF JigTimerC.Q THEN
				AUTO_MODE.JIGC_ErrorState := TRUE;
				IF GVL.ClearError THEN
					JigTimerC(IN:= FALSE);
					GVL.ClearError := FALSE;
				ELSE
					AUTO_MODE.Halt_Production := TRUE;
					AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_RELEASE);
					AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ERROR);
					LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
								spLogAction	 := MSG.ACTION_JIGC_RELEASE, 
								spLogStatus	 := MSG.STATUS_ERROR,
								plogFlag	 := TRUE);
				END_IF
			ELSIF GVL.JIGC_Complete THEN
				JigTimerC(IN:= FALSE);
				AUTO_MODE.JIGC_ErrorState := FALSE;
				process_H := 5;
				B5_sequence := 15;
				AUTO_MODE.next_step := FALSE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_COMPLETE);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_COMPLETE, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		END_IF
		
	// JIG C PICK (KR2) -------------------------------------------------------------------------------------------------------
	15: 
		IF process_I = 0 THEN
			Bit1 := 3;
			Bit2 := 2; // 202
			IF 	KR2.Idle AND 
				KR4.Idle AND 
				NOT GVL.JIGC_Ready AND 
				AUTO_MODE.JIGC_LOAD AND 
				NOT AUTO_MODE.JIGC_PICK AND
				NOT AUTO_MODE.CR_PICK THEN
						KR2.bOutBit[ Bit1, Bit2 ] := TRUE;
						AUTO_MODE.JIGC_PICK := TRUE;
						process_I := 1;
						AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_PICK);
						AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
						LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
									spLogAction	 := MSG.ACTION_JIGC_PICK, 
									spLogStatus	 := MSG.STATUS_RUN,
									plogFlag	 := TRUE);
						RETURN;
			END_IF
		ELSIF process_I = 1 THEN
			KR2.bOutBit[ Bit1, Bit2 ] := TRUE;
			IF KR2.bInBit[ Bit1, Bit2 ] THEN
				KR2.bOutBit[ Bit1, Bit2 ] := FALSE;
				process_I := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_PICK);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_PICK, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_I = 2 THEN
			KR2.bOutBit[ Bit1, Bit2 ] := FALSE;
			IF NOT KR2.bInBit[ Bit1, Bit2 ] THEN
				process_I := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_PICK);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_PICK, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_I = 3 THEN
			IF KR2.Idle THEN
				AUTO_MODE.JIGC_LOAD := FALSE;
				process_I := 4;
				B5_sequence := 16;
				AUTO_MODE.next_step := FALSE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_JIGC_PICK);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_JIGC_PICK, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		END_IF
	
	// PLACE TO CR (KR2) ------------------------------------------------------------------------------------------
	16:
		IF process_K = 0 THEN
			SEQ_CR_PLACE();
			IF SEQ_CR_PLACE.CR_found THEN
				IF KR2.Idle AND AUTO_MODE.JIGC_PICK THEN
					CASE SEQ_CR_PLACE.CR_place_Rack OF
						1:
//							Bit1 						:= 3; 
//							Bit2 						:= 5;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR1;
							process_K 					:= 1;
						2:
							Bit1 						:= 3; 
							Bit2 						:= 6;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR2;
							process_K 					:= 1;
						3:
							Bit1 						:= 3; 
							Bit2 						:= 7;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR3;
							process_K 					:= 1;
						4:
							Bit1 						:= 4; 
							Bit2 						:= 0;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR4;
							process_K 					:= 1;
						5:
							Bit1 						:= 4; 
							Bit2 						:= 1;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR5;
							process_K 					:= 1;
						6:
							Bit1 						:= 4; 
							Bit2 						:= 2;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR6;
							process_K 					:= 1;
						7:
							Bit1 						:= 4; 
							Bit2 						:= 3;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR7;
							process_K 					:= 1;
						8:
//							Bit1 						:= 4; 
//							Bit2 						:= 4;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR8;
							process_K 					:= 1;
						9:
							Bit1 						:= 4; 
							Bit2 						:= 5;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR9;
							process_K 					:= 1;
						10:
							Bit1 						:= 4; 
							Bit2 						:= 6;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR10;
							process_K 					:= 1;
						11:
							Bit1 						:= 4; 
							Bit2 						:= 7;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR11;
							process_K 					:= 1;
						12:
							Bit1 						:= 5; 
							Bit2 						:= 0;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR12;
							process_K 					:= 1;
						13:
							Bit1 						:= 5; 
							Bit2 						:= 1;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR13;
							process_K 					:= 1;
						14: 
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR14;
							process_K 					:= 1;
						15:
//							Bit1 						:= 5; 
//							Bit2 						:= 2;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR15;
							process_K 					:= 1;
						16:
							Bit1 						:= 5; 
							Bit2 						:= 3;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR16;
							process_K 					:= 1;
						17:
							Bit1 						:= 5; 
							Bit2 						:= 4;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR17;
							process_K 					:= 1;
						18:
							Bit1 						:= 5; 
							Bit2 						:= 5;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR18;
							process_K 					:= 1;
						19:
							Bit1 						:= 5; 
							Bit2 						:= 6;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR19;
							process_K 					:= 1;
						20:
							Bit1 						:= 5; 
							Bit2 						:= 7;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR20;
							process_K 					:= 1;
						21:
							Bit1 						:= 6; 
							Bit2 						:= 0;
							KR2.bOutBit[ Bit1, Bit2 ] 	:= TRUE;
							Msg_PlaceCR 				:= MSG.ACTION_PLACE_TO_CR21;
							process_K 					:= 1;
					END_CASE
				
					AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,Msg_PlaceCR);
					AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_RUN);
					LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
								spLogAction	 := Msg_PlaceCR, 
								spLogStatus	 := MSG.STATUS_RUN,
								plogFlag	 := TRUE);	
				END_IF
			END_IF
		ELSIF process_K = 1 THEN
			KR2.bOutBit[ Bit1, Bit2 ] := TRUE;
			IF KR2.bInBit[ Bit1, Bit2] THEN
				KR2.bOutBit[ Bit1, Bit2 ] := FALSE;
				process_K := 2;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_PLACE_TO_CR);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_ACK);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_PLACE_TO_CR, 
							spLogStatus	 := MSG.STATUS_ACK,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_K = 2 THEN
			KR2.bOutBit[ Bit1, Bit2] := FALSE;
			IF NOT KR2.bInBit[ Bit1, Bit2] THEN
				process_K := 3;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_PLACE_TO_CR);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_DONE);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_PLACE_TO_CR, 
							spLogStatus	 := MSG.STATUS_DONE,
							plogFlag	 := TRUE);
				RETURN;
			END_IF
		ELSIF process_K = 3 THEN
			IF KR2.Idle THEN
				AUTO_MODE.JIGC_PICK := FALSE;
				SEQ_CR_PLACE.CR_found := FALSE;
				process_K := 4;
				B5_sequence := 17;
				AUTO_MODE.next_step := FALSE;
				AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MSG.ACTION_PLACE_TO_CR);
				AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_COMP);
				LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
							spLogAction	 := MSG.ACTION_PLACE_TO_CR, 
							spLogStatus	 := MSG.STATUS_COMP,
							plogFlag	 := TRUE);
			END_IF
		END_IF
	// END (KR2) -------------------------------------------------------------------------------------------------------
	17:
		B5_sequence := 0;
		IF_RACK_CHECK.checkIn_B5 := FALSE;
		AUTO_MODE.next_step := FALSE;
		AUTO_MODE.processnameA5 := CONCAT(MSG.COMP_B5,MAIN.fb_TimeStamp.SystemTime);
		AUTO_MODE.processnameA5 := CONCAT(AUTO_MODE.processnameA5,MSG.STATUS_END);
		LOGPROCESS( spLogComp	 := MSG.COMP_B5, 
					spLogAction	 := MSG.ACTION_IF_TO_CR, 
					spLogStatus	 := MSG.STATUS_END,
					plogFlag	 := TRUE);
		
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="SEQ_B5">
      <LineId Id="2197" Count="4" />
      <LineId Id="3411" Count="22" />
      <LineId Id="3410" Count="0" />
      <LineId Id="3435" Count="4" />
      <LineId Id="3434" Count="0" />
      <LineId Id="3441" Count="0" />
      <LineId Id="2220" Count="10" />
      <LineId Id="2232" Count="60" />
      <LineId Id="2294" Count="56" />
      <LineId Id="3442" Count="20" />
      <LineId Id="2354" Count="0" />
      <LineId Id="2356" Count="5" />
      <LineId Id="3463" Count="6" />
      <LineId Id="2362" Count="53" />
      <LineId Id="3470" Count="0" />
      <LineId Id="2416" Count="5" />
      <LineId Id="2424" Count="6" />
      <LineId Id="3145" Count="0" />
      <LineId Id="3471" Count="22" />
      <LineId Id="3146" Count="0" />
      <LineId Id="3148" Count="8" />
      <LineId Id="2431" Count="68" />
      <LineId Id="3494" Count="25" />
      <LineId Id="3532" Count="0" />
      <LineId Id="3521" Count="10" />
      <LineId Id="2515" Count="52" />
      <LineId Id="3533" Count="0" />
      <LineId Id="2568" Count="5" />
      <LineId Id="2576" Count="6" />
      <LineId Id="3157" Count="0" />
      <LineId Id="3534" Count="22" />
      <LineId Id="3158" Count="0" />
      <LineId Id="3160" Count="8" />
      <LineId Id="2583" Count="4" />
      <LineId Id="2589" Count="71" />
      <LineId Id="3558" Count="0" />
      <LineId Id="2661" Count="6" />
      <LineId Id="3559" Count="20" />
      <LineId Id="2670" Count="86" />
      <LineId Id="3689" Count="0" />
      <LineId Id="2757" Count="57" />
      <LineId Id="3580" Count="19" />
      <LineId Id="2818" Count="0" />
      <LineId Id="2820" Count="5" />
      <LineId Id="3600" Count="6" />
      <LineId Id="2826" Count="52" />
      <LineId Id="3607" Count="0" />
      <LineId Id="2881" Count="6" />
      <LineId Id="3169" Count="0" />
      <LineId Id="3608" Count="22" />
      <LineId Id="3170" Count="0" />
      <LineId Id="3172" Count="8" />
      <LineId Id="2888" Count="11" />
      <LineId Id="3690" Count="0" />
      <LineId Id="2900" Count="52" />
      <LineId Id="3208" Count="84" />
      <LineId Id="3658" Count="0" />
      <LineId Id="3293" Count="51" />
      <LineId Id="3071" Count="39" />
      <LineId Id="3373" Count="1" />
      <LineId Id="3111" Count="0" />
      <LineId Id="3113" Count="10" />
      <LineId Id="19" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>